(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{620:function(e,a,v){"use strict";v.r(a);var l=v(16),_=Object(l.a)({},(function(){var e=this,a=e.$createElement,v=e._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("webpack 是事实上的前端打包标准,相关的面试题也是面试的热点.")]),e._v(" "),v("h2",{attrs:{id:"webpack-与-grunt、gulp-的不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-与-grunt、gulp-的不同"}},[e._v("#")]),e._v(" webpack 与 grunt、gulp 的不同？")]),e._v(" "),v("p",[e._v("Grunt、Gulp 是基于任务运行的工具：")]),e._v(" "),v("p",[e._v("它们会自动执行指定的任务，就像流水线，把资源放上去然后通过不同插件进行加工，它们包含活跃的社区，丰富的插件，能方便的打造各种工作流。")]),e._v(" "),v("p",[e._v("Webpack 是基于模块化打包的工具:")]),e._v(" "),v("p",[e._v("自动化处理模块,webpack 把一切当成模块，当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。")]),e._v(" "),v("p",[e._v("因此这是完全不同的两类工具,而现在主流的方式是用 npm script 代替 Grunt、Gulp,npm script 同样可以打造任务流.")]),e._v(" "),v("h2",{attrs:{id:"webpack、rollup、parcel-优劣"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack、rollup、parcel-优劣"}},[e._v("#")]),e._v(" webpack、rollup、parcel 优劣？")]),e._v(" "),v("ul",[v("li",[e._v("webpack 适用于大型复杂的前端站点构建: webpack 有强大的 loader 和插件生态,\b 打包后的文件实际上就是一个立即执行函数，这个立即执行函数接收一个参数，这个参数是模块对象，键为各个模块的路径，值为模块内容。立即执行函数内部则处理模块之间的引用，执行模块等,这种情况更适合文件依赖复杂的应用开发.")]),e._v(" "),v("li",[e._v("rollup 适用于基础库的打包，如 vue、d3 等: Rollup 就是将各个模块打包进一个文件中，并且通过 Tree-shaking 来删除无用的代码,可以最大程度上降低代码体积,但是 rollup 没有 webpack 如此多的的如代码分割、按需加载等高级功能，其更聚焦于库的打包，因此更适合库的开发.")]),e._v(" "),v("li",[e._v("parcel 适用于简单的实验性项目: 他可以满足低门槛的快速看到效果,但是生态差、报错信息不够全面都是他的硬伤，除了一些玩具项目或者实验项目不建议使用")])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/14f023a939e7a89330629f4cffb70cfd.png",alt:"2019-08-03-02-53-46"}})]),e._v(" "),v("p",[v("img",{attrs:{src:"https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/e790108aaba2c7c7a2e7393de102b1b5.png",alt:"2019-08-03-02-53-34"}})]),e._v(" "),v("h2",{attrs:{id:"有哪些常见的-loader"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常见的-loader"}},[e._v("#")]),e._v(" 有哪些常见的 Loader？")]),e._v(" "),v("ul",[v("li",[e._v("file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件")]),e._v(" "),v("li",[e._v("url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去")]),e._v(" "),v("li",[e._v("source-map-loader：加载额外的 Source Map 文件，以方便断点调试")]),e._v(" "),v("li",[e._v("image-loader：加载并且压缩图片文件")]),e._v(" "),v("li",[e._v("babel-loader：把 ES6 转换成 ES5")]),e._v(" "),v("li",[e._v("css-loader：加载 CSS，支持模块化、压缩、文件导入等特性")]),e._v(" "),v("li",[e._v("style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。")]),e._v(" "),v("li",[e._v("eslint-loader：通过 ESLint 检查 JavaScript 代码")])]),e._v(" "),v("h2",{attrs:{id:"有哪些常见的-plugin"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常见的-plugin"}},[e._v("#")]),e._v(" 有哪些常见的 Plugin？")]),e._v(" "),v("ul",[v("li",[e._v("define-plugin：定义环境变量")]),e._v(" "),v("li",[e._v("html-webpack-plugin：简化 html 文件创建")]),e._v(" "),v("li",[e._v("uglifyjs-webpack-plugin：通过"),v("code",[e._v("UglifyES")]),e._v("压缩"),v("code",[e._v("ES6")]),e._v("代码")]),e._v(" "),v("li",[e._v("webpack-parallel-uglify-plugin: 多核压缩,提高压缩速度")]),e._v(" "),v("li",[e._v("webpack-bundle-analyzer: 可视化 webpack 输出文件的体积")]),e._v(" "),v("li",[e._v("mini-css-extract-plugin: CSS 提取到单独的文件中,支持按需加载")])]),e._v(" "),v("h2",{attrs:{id:"分别介绍-bundle-chunk-module-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分别介绍-bundle-chunk-module-是什么"}},[e._v("#")]),e._v(" 分别介绍 bundle，chunk，module 是什么")]),e._v(" "),v("ul",[v("li",[e._v("bundle：是由 webpack 打包出来的文件")]),e._v(" "),v("li",[e._v("chunk：代码块，一个 chunk 由多个模块组合而成，用于代码的合并和分割")]),e._v(" "),v("li",[e._v("module：是开发中的单个模块，在 webpack 的世界，一切皆模块，一个模块对应一个文件，webpack 会从配置的 entry 中递归开始找出所有依赖的模块")])]),e._v(" "),v("h2",{attrs:{id:"loader-和-plugin-的不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#loader-和-plugin-的不同"}},[e._v("#")]),e._v(" Loader 和 Plugin 的不同？")]),e._v(" "),v("p",[v("strong",[e._v("不同的作用:")])]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Loader")]),e._v('直译为"加载器"。Webpack 将一切文件视为模块，但是 webpack 原生是只能解析 js 文件，如果想将其他文件也打包的话，就会用到'),v("code",[e._v("loader")]),e._v("。 所以 Loader 的作用是让 webpack 拥有了加载和解析"),v("em",[e._v("非 JavaScript 文件")]),e._v("的能力。")]),e._v(" "),v("li",[v("strong",[e._v("Plugin")]),e._v('直译为"插件"。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。')])]),e._v(" "),v("p",[v("strong",[e._v("不同的用法:")])]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Loader")]),e._v("在"),v("code",[e._v("module.rules")]),e._v("中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个"),v("code",[e._v("Object")]),e._v("，里面描述了对于什么类型的文件（"),v("code",[e._v("test")]),e._v("），使用什么加载("),v("code",[e._v("loader")]),e._v(")和使用的参数（"),v("code",[e._v("options")]),e._v("）")]),e._v(" "),v("li",[v("strong",[e._v("Plugin")]),e._v("在"),v("code",[e._v("plugins")]),e._v("中单独配置。 类型为数组，每一项是一个"),v("code",[e._v("plugin")]),e._v("的实例，参数都通过构造函数传入。")])]),e._v(" "),v("h2",{attrs:{id:"webpack-的构建流程是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的构建流程是什么"}},[e._v("#")]),e._v(" webpack 的构建流程是什么?")]),e._v(" "),v("p",[e._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),e._v(" "),v("ol",[v("li",[e._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")]),e._v(" "),v("li",[e._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),e._v(" "),v("li",[e._v("确定入口：根据配置中的 entry 找出所有的入口文件；")]),e._v(" "),v("li",[e._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),e._v(" "),v("li",[e._v("完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),e._v(" "),v("li",[e._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),e._v(" "),v("li",[e._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])]),e._v(" "),v("p",[e._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),e._v(" "),v("blockquote",[v("p",[e._v("来源于"),v("a",{attrs:{href:"https://wangchong.tech/webpack/5%E5%8E%9F%E7%90%86/5-1%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%A6%82%E6%8B%AC.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入浅出 webpack 第五章"),v("OutboundLink")],1)])]),e._v(" "),v("blockquote",[v("p",[e._v("拓展阅读"),v("a",{attrs:{href:"https://fed.taobao.org/blog/2016/09/10/webpack-flow/",target:"_blank",rel:"noopener noreferrer"}},[e._v("细说 webpack 之流程篇"),v("OutboundLink")],1)])]),e._v(" "),v("h2",{attrs:{id:"是否写过-loader-和-plugin-描述一下编写-loader-或-plugin-的思路"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#是否写过-loader-和-plugin-描述一下编写-loader-或-plugin-的思路"}},[e._v("#")]),e._v(" 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？")]),e._v(" "),v("p",[e._v('Loader 像一个"翻译官"把读到的源文件内容转义成新的文件内容，并且每个 Loader 通过链式操作，将源文件一步步翻译成想要的样子。')]),e._v(" "),v("p",[e._v('编写 Loader 时要遵循单一原则，每个 Loader 只做一种"转义"工作。 每个 Loader 的拿到的是源文件内容（'),v("code",[e._v("source")]),e._v("），可以通过返回值的方式将处理后的内容输出，也可以调用"),v("code",[e._v("this.callback()")]),e._v("方法，将内容返回给 webpack。 还可以通过  "),v("code",[e._v("this.async()")]),e._v("生成一个"),v("code",[e._v("callback")]),e._v("函数，再用这个 callback 将处理后的内容输出出去。 此外"),v("code",[e._v("webpack")]),e._v("还为开发者准备了开发 loader 的工具函数集——"),v("code",[e._v("loader-utils")]),e._v("。")]),e._v(" "),v("p",[e._v("相对于 Loader 而言，Plugin 的编写就灵活了许多。 webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。")]),e._v(" "),v("h2",{attrs:{id:"webpack-的热更新是如何做到的-说明其原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的热更新是如何做到的-说明其原理"}},[e._v("#")]),e._v(" webpack 的热更新是如何做到的？说明其原理？")]),e._v(" "),v("p",[e._v("webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。")]),e._v(" "),v("p",[v("strong",[e._v("原理：")])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://xiaomuzhu-image.oss-cn-beijing.aliyuncs.com/c0863ad3d922fceccfc8290e39bb2474.png",alt:"2019-08-03-15-45-12"}})]),e._v(" "),v("p",[e._v("首先要知道 server 端和 client 端都做了处理工作")]),e._v(" "),v("ol",[v("li",[e._v("第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。")]),e._v(" "),v("li",[e._v("第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API 对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。")]),e._v(" "),v("li",[e._v("第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。")]),e._v(" "),v("li",[e._v("第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。")]),e._v(" "),v("li",[e._v("webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。")]),e._v(" "),v("li",[e._v("HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。")]),e._v(" "),v("li",[e._v("而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。")]),e._v(" "),v("li",[e._v("最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。")])]),e._v(" "),v("blockquote",[v("p",[e._v("详细原理解析来源于知乎饿了么前端"),v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30669007",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack HMR 原理解析"),v("OutboundLink")],1)])]),e._v(" "),v("h2",{attrs:{id:"如何用-webpack-来优化前端性能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何用-webpack-来优化前端性能"}},[e._v("#")]),e._v(" 如何用 webpack 来优化前端性能？")]),e._v(" "),v("p",[e._v("用 webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运行快速高效。")]),e._v(" "),v("ul",[v("li",[e._v("压缩代码:删除多余的代码、注释、简化代码的写法等等方式。可以利用 webpack 的"),v("code",[e._v("UglifyJsPlugin")]),e._v("和"),v("code",[e._v("ParallelUglifyPlugin")]),e._v("来压缩 JS 文件， 利用"),v("code",[e._v("cssnano")]),e._v("（css-loader?minimize）来压缩 css")]),e._v(" "),v("li"),e._v(" "),v("li",[e._v("利用 CDN 加速: 在构建过程中，将引用的静态资源路径修改为 CDN 上对应的路径。可以利用 webpack 对于"),v("code",[e._v("output")]),e._v("参数和各 loader 的"),v("code",[e._v("publicPath")]),e._v("参数来修改资源路径")]),e._v(" "),v("li",[e._v("Tree Shaking: 将代码中永远不会走到的片段删除掉。可以通过在启动 webpack 时追加参数"),v("code",[e._v("--optimize-minimize")]),e._v("来实现")]),e._v(" "),v("li",[e._v("Code Splitting: 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利用浏览器缓存")]),e._v(" "),v("li",[e._v("提取公共第三方库:  SplitChunksPlugin 插件来进行公共模块抽取,利用浏览器缓存可以长期缓存这些无需频繁变动的公共代码")])]),e._v(" "),v("blockquote",[v("p",[e._v("详解可以参照"),v("RouterLink",{attrs:{to:"/19-Webpack/load.html"}},[e._v("前端性能优化-加载")])],1)]),e._v(" "),v("h2",{attrs:{id:"如何提高-webpack-的打包速度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何提高-webpack-的打包速度"}},[e._v("#")]),e._v(" 如何提高 webpack 的打包速度?")]),e._v(" "),v("ul",[v("li",[e._v("happypack: 利用进程并行编译 loader,利用缓存来使得 rebuild 更快,遗憾的是作者表示已经不会继续开发此项目,类似的替代者是"),v("a",{attrs:{href:"https://github.com/webpack-contrib/thread-loader",target:"_blank",rel:"noopener noreferrer"}},[e._v("thread-loader"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://webpack.docschina.org/configuration/externals/",target:"_blank",rel:"noopener noreferrer"}},[e._v("外部扩展(externals)"),v("OutboundLink")],1),e._v(": 将不怎么需要更新的第三方库脱离 webpack 打包，不被打入 bundle 中，从而减少打包时间,比如 jQuery 用 script 标签引入")]),e._v(" "),v("li",[e._v("dll: 采用 webpack 的 DllPlugin 和 DllReferencePlugin 引入 dll，让一些基本不会改动的代码先打包成静态资源,避免反复编译浪费时间")]),e._v(" "),v("li",[e._v("利用缓存: "),v("code",[e._v("webpack.cache")]),e._v("、babel-loader.cacheDirectory、"),v("code",[e._v("HappyPack.cache")]),e._v("都可以利用缓存提高 rebuild 效率")]),e._v(" "),v("li",[e._v("缩小文件搜索范围: 比如 babel-loader 插件,如果你的文件仅存在于 src 中,那么可以"),v("code",[e._v("include: path.resolve(__dirname, 'src')")]),e._v(",当然绝大多数情况下这种操作的提升有限,除非不小心 build 了 node_modules 文件")])]),e._v(" "),v("blockquote",[v("p",[e._v("实战文章推荐"),v("a",{attrs:{href:"https://louiszhai.github.io/2019/01/04/webpack4/",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 webpack4 提升 180%编译速度\nTool\n"),v("OutboundLink")],1)])]),e._v(" "),v("h2",{attrs:{id:"如何提高-webpack-的构建速度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何提高-webpack-的构建速度"}},[e._v("#")]),e._v(" 如何提高 webpack 的构建速度？")]),e._v(" "),v("ol",[v("li",[e._v("多入口情况下，使用"),v("code",[e._v("CommonsChunkPlugin")]),e._v("来提取公共代码")]),e._v(" "),v("li",[e._v("通过"),v("code",[e._v("externals")]),e._v("配置来提取常用库")]),e._v(" "),v("li",[e._v("利用"),v("code",[e._v("DllPlugin")]),e._v("和"),v("code",[e._v("DllReferencePlugin")]),e._v("预编译资源模块 通过"),v("code",[e._v("DllPlugin")]),e._v("来对那些我们引用但是绝对不会修改的 npm 包来进行预编译，再通过"),v("code",[e._v("DllReferencePlugin")]),e._v("将预编译的模块加载进来。")]),e._v(" "),v("li",[e._v("使用"),v("code",[e._v("Happypack")]),e._v("  实现多线程加速编译")]),e._v(" "),v("li",[e._v("使用"),v("code",[e._v("webpack-uglify-parallel")]),e._v("来提升"),v("code",[e._v("uglifyPlugin")]),e._v("的压缩速度。 原理上"),v("code",[e._v("webpack-uglify-parallel")]),e._v("采用了多核并行压缩来提升压缩速度")]),e._v(" "),v("li",[e._v("使用"),v("code",[e._v("Tree-shaking")]),e._v("和"),v("code",[e._v("Scope Hoisting")]),e._v("来剔除多余代码")])]),e._v(" "),v("h2",{attrs:{id:"怎么配置单页应用-怎么配置多页应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#怎么配置单页应用-怎么配置多页应用"}},[e._v("#")]),e._v(" 怎么配置单页应用？怎么配置多页应用？")]),e._v(" "),v("p",[e._v("单页应用可以理解为 webpack 的标准模式，直接在"),v("code",[e._v("entry")]),e._v("中指定单页应用的入口即可，这里不再赘述")]),e._v(" "),v("p",[e._v("多页应用的话，可以使用 webpack 的  "),v("code",[e._v("AutoWebPlugin")]),e._v("来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：")]),e._v(" "),v("ul",[v("li",[e._v("每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套 css 样式表")]),e._v(" "),v("li",[e._v("随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置")])]),e._v(" "),v("hr")])}),[],!1,null,null,null);a.default=_.exports}}]);