(window.webpackJsonp=window.webpackJsonp||[]).push([[325],{744:function(t,a,s){"use strict";s.r(a);var r=s(16),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("这个编码规范是给 TypeScript 开发团队在开发 TypeScript 时使用的。 对于使用 TypeScript 的普通用户来说不一定适用，但是可以做为一个参考。")]),t._v(" "),s("h2",{attrs:{id:"命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名"}},[t._v("#")]),t._v(" 命名")]),t._v(" "),s("p",[t._v("使用 PascalCase 为类型命名。\n不要使用 I 做为接口名前缀。\n使用 PascalCase 为枚举值命名。\n使用 camelCase 为函数命名。\n使用 camelCase 为属性或本地变量命名。\n不要为私有属性名添加_前缀。\n尽可能使用完整的单词拼写命名。")]),t._v(" "),s("h2",{attrs:{id:"组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),s("p",[t._v("1 个文件对应一个逻辑组件 （比如：解析器，检查器）。\n不要添加新的文件。 😃\n.generated.*后缀的文件是自动生成的，不要手动改它。")]),t._v(" "),s("h2",{attrs:{id:"类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),s("p",[t._v("不要导出类型/函数，除非你要在不同的组件中共享它。\n不要在全局命名空间内定义类型/值。\n共享的类型应该在 types.ts 里定义。\n在一个文件里，类型定义应该出现在顶部。")]),t._v(" "),s("h2",{attrs:{id:"null-和-undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[t._v("#")]),t._v(" null 和 undefined：")]),t._v(" "),s("p",[t._v("使用 undefined，不要使用 null。")]),t._v(" "),s("h2",{attrs:{id:"一般假设"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一般假设"}},[t._v("#")]),t._v(" 一般假设")]),t._v(" "),s("p",[t._v("假设像 Nodes，Symbols 等这样的对象在定义它的组件外部是不可改变的。不要去改变它们。\n假设数组是不能改变的。")]),t._v(" "),s("h2",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),s("p",[t._v("为了保持一致，在核心编译链中不要使用类，使用函数闭包代替。")]),t._v(" "),s("h2",{attrs:{id:"标记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记"}},[t._v("#")]),t._v(" 标记")]),t._v(" "),s("p",[t._v("一个类型中有超过 2 个布尔属性时，把它变成一个标记。")]),t._v(" "),s("h2",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),s("p",[t._v("为函数，接口，枚举类型和类使用 JSDoc 风格的注释。")]),t._v(" "),s("h2",{attrs:{id:"字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),s("p",[t._v('使用双引号""\n所有要展示给用户看的信息字符串都要做好本地化工作（在 diagnosticMessages.json 中创建新的实体）。\n错误提示信息\n在句子结尾使用.。\n对不确定的实体使用不定冠词。\n确切的实体应该使用名字（变量名，类型名等）\n当创建一条新的规则时，主题应该使用单数形式（比如：An external module cannot...而不是 External modules cannot）。\n使用现在时态。')]),t._v(" "),s("h2",{attrs:{id:"错误提示信息代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误提示信息代码"}},[t._v("#")]),t._v(" 错误提示信息代码")]),t._v(" "),s("p",[t._v("提示信息被划分类成了一般的区间。如果要新加一个提示信息，在上条代码上加 1 做为新的代码。")]),t._v(" "),s("p",[t._v("1000 语法信息\n2000 语言信息\n4000 声明生成信息\n6000 命令行编译器信息\n7000 noImplicitAny 信息")]),t._v(" "),s("h2",{attrs:{id:"普通方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通方法"}},[t._v("#")]),t._v(" 普通方法")]),t._v(" "),s("p",[t._v("5000 编译器选项信息\n由于种种原因，我们避免使用一些方法，而使用我们自己定义的。")]),t._v(" "),s("p",[t._v("不使用 ECMAScript 5 函数；而是使用 core.ts 这里的。\n不要使用 for..in 语句；而是使用 ts.forEach，ts.forEachKey 和 ts.forEachValue。注意它们之间的区别。\n如果可能的话，尝试使用 ts.forEach，ts.map 和 ts.filter 代替循环。")]),t._v(" "),s("h2",{attrs:{id:"风格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#风格"}},[t._v("#")]),t._v(" 风格")]),t._v(" "),s("p",[t._v("使用 arrow 函数代替匿名函数表达式。\n只要需要的时候才把 arrow 函数的参数括起来。\n比如，(x) => x + x 是错误的，下面是正确的做法：")]),t._v(" "),s("p",[t._v("x => x + x\n(x,y) => x + y\n"),s("T",[t._v("(x: T, y: T) => x === y\n总是使用{}把循环体和条件语句括起来。")])],1),t._v(" "),s("p",[t._v("开始的{总是在同一行。\n小括号里开始不要有空白.\n逗号，冒号，分号后要有一个空格。比如：")]),t._v(" "),s("p",[t._v("for (var i = 0, n = str.length; i < 10; i++) { }\nif (x < 10) { }\nfunction f(x: number, y: string): void { }\n每个变量声明语句只声明一个变量\n（比如 使用 var x = 1; var y = 2; 而不是 var x = 1, y = 2;）。")]),t._v(" "),s("p",[t._v("else 要在结束的}后另起一行。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("TypeScript 代码整洁之道 ⭐️\n"),s("a",{attrs:{href:"https://github.com/forthealllight/blog/issues/67/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/forthealllight/blog/issues/67/"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("TypeScript 编码规范\n"),s("a",{attrs:{href:"https://ths.js.org/2020/05/24/TypeScript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/#1-%E5%91%BD%E5%90%8D%E5%8F%8A%E7%BA%A6%E5%AE%9A/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://ths.js.org/2020/05/24/TypeScript编码规范/#1-命名及约定/"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("React + TypeScript最佳实践 ⭐️\n"),s("a",{attrs:{href:"https://juejin.cn/post/6952696734078369828/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.cn/post/6952696734078369828/"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);