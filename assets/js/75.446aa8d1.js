(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{489:function(t,r,a){"use strict";a.r(r);var e=a(16),n=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"声明文件编写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明文件编写"}},[t._v("#")]),t._v(" 声明文件编写")]),t._v(" "),a("ul",[a("li",[t._v("declare")])]),t._v(" "),a("h2",{attrs:{id:"逆变协变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逆变协变"}},[t._v("#")]),t._v(" 逆变协变")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("协变（covariant），如果它保持了子类型序关系≦。该序关系是：子类型≦基类型。即List可以分配给List")])]),t._v(" "),a("li",[a("p",[t._v("逆变（contravariant），如果它逆转了子类型序关系。 List<“Animal> 可以分配给 List<“Dog>")])]),t._v(" "),a("li",[a("p",[t._v("双向协变 (Bivariant) List<”Animal> 与List<”Dog>可以互相分配")])]),t._v(" "),a("li",[a("p",[t._v("不变 (Invariant) List<“Animal> 和 List<”Dog>不存在分配关系，或者说无法互相分配")])])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7039315081150087181",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript类型中的逆变协变"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/book/7047524421182947366",target:"_blank",rel:"noopener noreferrer"}},[t._v("神光-TypeScript 类型体操通关秘籍"),a("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);