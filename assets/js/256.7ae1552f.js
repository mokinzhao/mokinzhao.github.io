(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{676:function(t,a,s){"use strict";s.r(a);var e=s(16),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"主流小程序开发框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主流小程序开发框架"}},[t._v("#")]),t._v(" 主流小程序开发框架")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/65/DB/CioPOWGtzVKAPPJLAABrVSrUlbo277.png",alt:""}})]),t._v(" "),s("p",[t._v("随着小程序在用户规模和商业化上取得的极大成功，各大平台都推出了自己的小程序。")]),t._v(" "),s("p",[t._v("然而这些平台的小程序开发在语法上又不尽相同，不同平台小程序代码的维护需要投入很大的精力，在逻辑性上也很难达到统一的效果。虽然也有各种转换工具可以基于某一个平台转换出其他平台的代码，但转换的效果也是差强人意，往往还需要人工去修改。")]),t._v(" "),s("p",[t._v("使用小程序跨端开发框架来实现一次开发、到处运行以提升效率，已经成为开发者强烈而迫切的需求。")]),t._v(" "),s("p",[t._v("目前，小程序跨端开发框架主要可以按照技术栈和实现原理两个维度进行分类。从技术栈来说，主流的跨端框架基本遵循 React、Vue 这两个前端开发最常使用的框架。由于所在团队主要使用的是React，所以本文主要介绍采用React语法的框架。从实现原理上，开源社区的跨端框架可分为\n编译时（compile time）和运行时（runtime）")]),t._v(" "),s("h2",{attrs:{id:"跨端框架原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨端框架原理"}},[t._v("#")]),t._v(" 跨端框架原理")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/91/80/CgqCHmAOlbyATtP1AAHVogfDtTQ350.png",alt:""}})])])}),[],!1,null,null,null);a.default=r.exports}}]);